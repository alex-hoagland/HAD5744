# Last modified: 8/17/2022
#
### PURPOSE:
# Lecture 11 code and output file
#
### NOTES:
# - uses the Tidyverse package and Dplyr
################################################################################
### 0. Load the packages we will need for this file ####
library(tidyverse) # load the installed package for each new session of R
install.packages('rlang')
install.packages("rlang")
### 0. Load the packages we will need for this file ####
library(tidyverse) # load the installed package for each new session of R
?update.package
?update.packages
?install.packages
packageVersion(rlang)
packageVersion('rlang')
install.packages(c("bayesplot", "bayestestR", "bit", "brew", "Brobdingnag", "broom", "broom.helpers", "bslib", "callr", "car", "classInt", "cli", "colourpicker", "commonmark", "copula", "cpp11", "crayon", "curl", "data.table", "datawizard", "dbplyr", "desc", "devtools", "digest", "distr", "distrEx", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "farver", "fixest", "fontawesome", "forcats", "future", "gargle", "gert", "ggdag", "gghighlight", "ggraph", "ggrepel", "ggridges", "gh", "gitcreds", "globals", "gmm", "gmp", "googlesheets4", "graphlayouts", "gt", "gtable", "gtsummary", "haven", "HDInterval", "Hmisc", "hms", "htmlTable", "htmltools", "httr", "igraph", "insight", "isoband", "jsonlite", "knitr", "labelled", "latticeExtra", "lme4", "lpSolve", "lubridate", "magic", "maptools", "marginaleffects", "markdown", "MatchIt", "MatrixModels", "matrixStats", "mice", "miceadds", "minqa", "mnormt", "modelr", "modelsummary", "np", "openssl", "optmatch", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgload", "plotly", "plyr", "polyclip", "processx", "ps", "psych", "purrr", "quantreg", "R.utils", "Rcpp", "RcppArmadillo", "RcppEigen", "rdrobust", "readr", "readxl", "renv", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "stevedata", "stringi", "stringr", "sys", "tables", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "viridisLite", "vroom", "vtable", "webshot", "wk", "writexl", "xfun", "XML", "xts", "yaml", "zip", "zoo"))
install.packages(c("bayesplot", "bayestestR", "bit", "brew", "Brobdingnag", "broom", "broom.helpers", "bslib", "callr", "car", "classInt", "cli", "colourpicker", "commonmark", "copula", "cpp11", "crayon", "curl", "data.table", "datawizard", "dbplyr", "desc", "devtools", "digest", "distr", "distrEx", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "farver", "fixest", "fontawesome", "forcats", "future", "gargle", "gert", "ggdag", "gghighlight", "ggraph", "ggrepel", "ggridges", "gh", "gitcreds", "globals", "gmm", "gmp", "googlesheets4", "graphlayouts", "gt", "gtable", "gtsummary", "haven", "HDInterval", "Hmisc", "hms", "htmlTable", "htmltools", "httr", "igraph", "insight", "isoband", "jsonlite", "knitr", "labelled", "latticeExtra", "lme4", "lpSolve", "lubridate", "magic", "maptools", "marginaleffects", "markdown", "MatchIt", "MatrixModels", "matrixStats", "mice", "miceadds", "minqa", "mnormt", "modelr", "modelsummary", "np", "openssl", "optmatch", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgload", "plotly", "plyr", "polyclip", "processx", "ps", "psych", "purrr", "quantreg", "R.utils", "Rcpp", "RcppArmadillo", "RcppEigen", "rdrobust", "readr", "readxl", "renv", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "stevedata", "stringi", "stringr", "sys", "tables", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "viridisLite", "vroom", "vtable", "webshot", "wk", "writexl", "xfun", "XML", "xts", "yaml", "zip", "zoo"))
install.packages(c("bayesplot", "bayestestR", "bit", "brew", "Brobdingnag", "broom", "broom.helpers", "bslib", "callr", "car", "classInt", "cli", "colourpicker", "commonmark", "copula", "cpp11", "crayon", "curl", "data.table", "datawizard", "dbplyr", "desc", "devtools", "digest", "distr", "distrEx", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "farver", "fixest", "fontawesome", "forcats", "future", "gargle", "gert", "ggdag", "gghighlight", "ggraph", "ggrepel", "ggridges", "gh", "gitcreds", "globals", "gmm", "gmp", "googlesheets4", "graphlayouts", "gt", "gtable", "gtsummary", "haven", "HDInterval", "Hmisc", "hms", "htmlTable", "htmltools", "httr", "igraph", "insight", "isoband", "jsonlite", "knitr", "labelled", "latticeExtra", "lme4", "lpSolve", "lubridate", "magic", "maptools", "marginaleffects", "markdown", "MatchIt", "MatrixModels", "matrixStats", "mice", "miceadds", "minqa", "mnormt", "modelr", "modelsummary", "np", "openssl", "optmatch", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgload", "plotly", "plyr", "polyclip", "processx", "ps", "psych", "purrr", "quantreg", "R.utils", "Rcpp", "RcppArmadillo", "RcppEigen", "rdrobust", "readr", "readxl", "renv", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "stevedata", "stringi", "stringr", "sys", "tables", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "viridisLite", "vroom", "vtable", "webshot", "wk", "writexl", "xfun", "XML", "xts", "yaml", "zip", "zoo"))
install.packages(c("bayesplot", "bayestestR", "bit", "brew", "Brobdingnag", "broom", "broom.helpers", "bslib", "callr", "car", "classInt", "cli", "colourpicker", "commonmark", "copula", "cpp11", "crayon", "curl", "data.table", "datawizard", "dbplyr", "desc", "devtools", "digest", "distr", "distrEx", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "farver", "fixest", "fontawesome", "forcats", "future", "gargle", "gert", "ggdag", "gghighlight", "ggraph", "ggrepel", "ggridges", "gh", "gitcreds", "globals", "gmm", "gmp", "googlesheets4", "graphlayouts", "gt", "gtable", "gtsummary", "haven", "HDInterval", "Hmisc", "hms", "htmlTable", "htmltools", "httr", "igraph", "insight", "isoband", "jsonlite", "knitr", "labelled", "latticeExtra", "lme4", "lpSolve", "lubridate", "magic", "maptools", "marginaleffects", "markdown", "MatchIt", "MatrixModels", "matrixStats", "mice", "miceadds", "minqa", "mnormt", "modelr", "modelsummary", "np", "openssl", "optmatch", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgload", "plotly", "plyr", "polyclip", "processx", "ps", "psych", "purrr", "quantreg", "R.utils", "Rcpp", "RcppArmadillo", "RcppEigen", "rdrobust", "readr", "readxl", "renv", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "stevedata", "stringi", "stringr", "sys", "tables", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "viridisLite", "vroom", "vtable", "webshot", "wk", "writexl", "xfun", "XML", "xts", "yaml", "zip", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
### 0. Load the packages we will need for this file ####
library(tidyverse) # load the installed package for each new session of R
install.packages('rlang',version="1.0.6")
install.packages("rlang", version = "1.0.6")
install.packages("rlang", version = "1.0.6")
install.packages("rlang", version = "1.0.6")
packageVersion(rlang)
packageVersion('rlang')
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(broom)
library(readxl) # Read in data
library(modelsummary) # For making regression tables
library(causaldata) # Useful toy data sets
library(here) # Helpful in working with directories and projects
install.packages('rlang')
install.packages("rlang")
packageVersion('rlang')
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
packageVersion('rlang')
knitr::opts_chunk$set(echo = TRUE)
################################################################################
# I like to include several additional notes in the header of my files here:
#
# Last modified: 8/17/2022
#
### PURPOSE:
# Lecture 11 code and output file
#
### NOTES:
# - uses the Tidyverse package and Dplyr
################################################################################
### 0. Load the packages we will need for this file ####
library(tidyverse) # load the installed package for each new session of R
library(broom)
library(readxl) # Read in data
library(modelsummary) # For making regression tables
library(causaldata) # Useful toy data sets
library(here) # Helpful in working with directories and projects
library(AER) # this package has lots of applied metrics packages
library(foreign) # Helpful for reading in data from Stata or other code languages
library(gghighlight) # For figures
library(lubridate) # For figures
library(stargazer) # For tables
# TWFE Packages
library(fixest)
library(TwoWayFEWeights)
library(bacondecomp)
library(DIDmultiplegt)
library(did)
# library(did)
library(did2s)
library(etwfe)
install.packages('etwfe')
library(etwfe)
mydata <- read.csv(here("us_state_vaccinations.csv"))
mydata$date <- as.yearmon(mydata$date)
# Trim out some "states" that we don't need
`%!in%` <- Negate(`%in%`)
mydata <- mydata %>% filter(location  %!in% c("American Samoa", "Bureau of Prisons", "Dept of Defense",
"Federated States of Micronesia", "Guam", "Indian Health Svc",
"Long Term Care", "Marshall Islands", "Northern Mariana Islands",
"Puerto Rico", "Republic of Palau", "United States", "Veterans Health",
"Virgin Islands"))
# Group to month level
mydata <- mydata %>% group_by(date, location) %>%
summarize(total_vaccinations_per_hundred = sum(total_vaccinations_per_hundred,na.rm=T),
people_vaccinated_per_hundred = sum(people_vaccinated_per_hundred,na.rm=T),
monthly_vaccinations_per_million = sum(daily_vaccinations_per_million,na.rm=T))
# Identify all treated states for our TWFE regression
regdata_dte <- mydata %>% mutate(treatdate = ifelse(location %in% c("Ohio", "New York State", "Maryland"), 2021.417,
ifelse(location %in% c("Massachusetts", "Michigan"), 2021.583,NA)), # Note the treatment date doesn't matter for non-treated states
reltime = round((as.numeric(date) - treatdate)*12))
regdata_dte <- regdata_dte %>% mutate(state = ifelse(location %in% c("Ohio", "New York State", "Maryland", "Massachusetts", "Michigan"), 1, 0),
logy = log(monthly_vaccinations_per_million+1))
# Make sure to reassign "treated" states
dte <- feols(logy ~ i(reltime, ref = -1) |
date + location, data = regdata_dte)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
View(mydata)
regdata_dte <- regdata_dte %>% mutate(treated = ifelse(is.na(treated),0,treated))
regdata_dte <- regdata_dte %>% ungroup()%>% mutate(treated = ifelse(reltime >= 0,1,0))
regdata_dte <- regdata_dte %>% mutate(treated = ifelse(is.na(treated),0,treated))
regdata_dte <- regdata_dte %>% mutate(stateid = as.numeric(as.factor(location)),
dateid=as.numeric(as.factor(date))) # Need a state id variable as a number, not string
View(regdata_dte)
# first, identify all cohorts of treated observations
regdata_dte %>% filter(treated == 1) %>%
group_by(stateid)
# first, identify all cohorts of treated observations
regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
keep(date = min(date))
# first, identify all cohorts of treated observations
regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
filter(date == min(date))
# first, identify all cohorts of treated observations
cohort_ids <- regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
filter(date == min(date))
# first, identify all cohorts of treated observations
cohort_dates <- regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
filter(date == min(date))
rm(cohort_ids)
View(cohort_dates)
# first, identify all cohorts of treated observations
cohort_dates <- regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
filter(date == min(date)) %>% ungroup() %>%
select(date) %>% unique()
# first, identify all cohorts of treated observations
cohort_dates <- regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
filter(date == min(date)) # %>% ungroup() %>%
# for each cohort, pull all treated at time t + those not treated between (t-5,t+5)
stack_1 <- regdata_dte %>% filter(stateid %notin% c(22,23))
# for each cohort, pull all treated at time t + those not treated between (t-5,t+5)
`%!in%` <- Negate(`%in%`)
stack_1 <- regdata_dte %>% filter(stateid %!in% c(22,23))
stack_1 <- regdata_dte %>% filter(stateid %!in% c(22,23))
stack_2 <- regdata_dte %>% filter(stateid %!in% c(21,33,36))
# create stacked data
stack <- rbind(stack_1,stack_2)
# run event study on this data
dte <- feols(logy ~ i(reltime, ref = -1) |
date + location, data = regdata_dte)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
stack_1 <- regdata_dte %>%
filter(dateid >= 2 & dateid <= 10) %>% # Appropriate timing
filter(stateid %!in% c(22,23)) # Clean controls
stack_1 <- regdata_dte %>%
filter(dateid >= 2 & dateid <= 10) %>% # Appropriate timing
filter(stateid %!in% c(22,23)) # Clean controls
stack_1 <- regdata_dte %>%
filter(dateid >= 2 & dateid <= 10) %>% # Appropriate timing
filter(stateid %!in% c(22,23)) # Clean controls
stack_2 <- regdata_dte %>%
filter(dateid >= 4 & dateid <= 12) %>%
filter(stateid %!in% c(21,33,36))
# create stacked data
stack <- rbind(stack_1,stack_2)
# run event study on this data
dte <- feols(logy ~ i(reltime, ref = -1) |
date + location, data = regdata_dte)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
stack_1 <- regdata_dte %>%
filter(dateid >= 2 & dateid <= 10) %>% # Appropriate timing
filter(stateid %!in% c(22,23)) %>% # Clean controls
mutate(reltime = ifelse(treated == 1, dateid - 6, NA))
stack_2 <- regdata_dte %>%
filter(dateid >= 4 & dateid <= 12) %>%
filter(stateid %!in% c(21,33,36)) %>%
mutate(reltime = ifelse(treated == 1, dateid - 8, NA))
# create stacked data
stack <- rbind(stack_1,stack_2)
# run event study on this data
dte <- feols(logy ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
View(stack)
View(stack_1)
stack_1 <- regdata_dte %>%
filter(dateid >= 2 & dateid <= 10) %>% # Appropriate timing
filter(stateid %!in% c(22,23)) %>% # Clean controls
group_by(stateid) %>% mutate(evertreated = max(treated)) %>% ungroup() %>%
mutate(reltime = ifelse(evertreated == 1, dateid - 6, NA))
# Reset relative time for this cohort
stack_2 <- regdata_dte %>%
filter(dateid >= 4 & dateid <= 12) %>%
filter(stateid %!in% c(21,33,36)) %>%
group_by(stateid) %>% mutate(evertreated = max(treated)) %>% ungroup() %>%
mutate(reltime = ifelse(evertreated == 1, dateid - 8, NA))
# Reset relative time for this cohort
# create stacked data
stack <- rbind(stack_1,stack_2)
# run event study on this data
dte <- feols(logy ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
summary(dte)
# run event study on this data
dte <- feols(asinh(total_vaccinations_per_hundred) ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
# run event study on this data
dte <- feols(log(total_vaccinations_per_hundred) ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
# run event study on this data
dte <- feols(log(people_vaccinations_per_hundred) ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# run event study on this data
dte <- feols(log(people_vaccinated_per_hundred) ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# run event study on this data
dte <- feols(log(people_vaccinated_per_hundred) ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
summary(dte)
# run event study on this data
dte <- feols(log(monthly_vaccinations_per_million) ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
# run event study on this data
dte <- feols(monthly_vaccinations_per_million ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
knitr::opts_chunk$set(echo = TRUE)
################################################################################
# I like to include several additional notes in the header of my files here:
#
# Last modified: 8/17/2022
#
### PURPOSE:
# Lecture 11 code and output file
#
### NOTES:
# - uses the Tidyverse package and Dplyr
################################################################################
### 0. Load the packages we will need for this file ####
library(tidyverse) # load the installed package for each new session of R
library(broom)
library(readxl) # Read in data
library(modelsummary) # For making regression tables
library(causaldata) # Useful toy data sets
library(here) # Helpful in working with directories and projects
library(AER) # this package has lots of applied metrics packages
library(foreign) # Helpful for reading in data from Stata or other code languages
library(gghighlight) # For figures
library(lubridate) # For figures
library(stargazer) # For tables
# TWFE Packages
library(fixest)
library(TwoWayFEWeights)
library(bacondecomp)
library(DIDmultiplegt)
# library(did)
library(did2s)
# library(etwfe)
set.seed(03262020)
# Setting the seed helps to make random number generators give us the same numbers across machines
################################################################################
mydata <- read.csv(here("us_state_vaccinations.csv"))
mydata$date <- as.yearmon(mydata$date)
# Trim out some "states" that we don't need
`%!in%` <- Negate(`%in%`)
mydata <- mydata %>% filter(location  %!in% c("American Samoa", "Bureau of Prisons", "Dept of Defense",
"Federated States of Micronesia", "Guam", "Indian Health Svc",
"Long Term Care", "Marshall Islands", "Northern Mariana Islands",
"Puerto Rico", "Republic of Palau", "United States", "Veterans Health",
"Virgin Islands"))
# Group to month level
mydata <- mydata %>% group_by(date, location) %>%
summarize(total_vaccinations_per_hundred = sum(total_vaccinations_per_hundred,na.rm=T),
people_vaccinated_per_hundred = sum(people_vaccinated_per_hundred,na.rm=T),
monthly_vaccinations_per_million = sum(daily_vaccinations_per_million,na.rm=T))
# Identify all treated states for our TWFE regression
regdata_dte <- mydata %>% mutate(treatdate = ifelse(location %in% c("Ohio", "New York State", "Maryland"), 2021.417,
ifelse(location %in% c("Massachusetts", "Michigan"), 2021.583,NA)), # Note the treatment date doesn't matter for non-treated states
reltime = round((as.numeric(date) - treatdate)*12))
regdata_dte <- regdata_dte %>% mutate(state = ifelse(location %in% c("Ohio", "New York State", "Maryland", "Massachusetts", "Michigan"), 1, 0),
logy = log(monthly_vaccinations_per_million+1))
# Make sure to reassign "treated" states
dte <- feols(logy ~ i(reltime, ref = -1) |
date + location, data = regdata_dte)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
regdata_dte <- regdata_dte %>% ungroup()%>% mutate(treated = ifelse(reltime >= 0,1,0))
twowayfeweights(df=regdata_dte, # Dataframe
Y="logy", # Dep var
G="location", # group identifier
T="date", # Date var
D="treated", # Whether state was treated
cmd_type="feTR") # type of estimation to perform -- most commonly feTR
weighttable <- twowayfeweights(df=regdata_dte, # Dataframe
Y="logy", # Dep var
G="location", # group identifier
T="date", # Date var
D="treated", # Whether state was treated
cmd_type="feTR") # type of estimation to perform -- most commonly feTR
# lots of negative weighting here!
regdata_dte <- regdata_dte %>% mutate(treated = ifelse(is.na(treated),0,treated))
regdata_dte <- regdata_dte %>% mutate(stateid = as.numeric(as.factor(location)),
dateid=as.numeric(as.factor(date))) # Need a state id variable as a number, not string
bacon(formula = logy ~ treated,
data=regdata_dte,
id_var="stateid",
time_var="dateid",
quietly=F)
# first, identify all cohorts of treated observations
cohort_dates <- regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
filter(date == min(date)) # %>% ungroup() %>%
# select(date) %>% unique()
# two cohorts: Jun and Aug 2021
# for each cohort, pull all treated at time t + those not treated between (t-4,t+4)
`%!in%` <- Negate(`%in%`)
stack_1 <- regdata_dte %>%
filter(dateid >= 2 & dateid <= 10) %>% # Appropriate timing
filter(stateid %!in% c(22,23)) %>% # Clean controls
group_by(stateid) %>% mutate(evertreated = max(treated)) %>% ungroup() %>%
mutate(reltime = ifelse(evertreated == 1, dateid - 6, NA))
# Reset relative time for this cohort
stack_2 <- regdata_dte %>%
filter(dateid >= 4 & dateid <= 12) %>%
filter(stateid %!in% c(21,33,36)) %>%
group_by(stateid) %>% mutate(evertreated = max(treated)) %>% ungroup() %>%
mutate(reltime = ifelse(evertreated == 1, dateid - 8, NA))
# Reset relative time for this cohort
# create stacked data
stack <- rbind(stack_1,stack_2)
# run event study on this data
dte <- feols(monthly_vaccinations_per_million ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
knitr::opts_chunk$set(echo = TRUE)
################################################################################
# I like to include several additional notes in the header of my files here:
#
# Last modified: 8/17/2022
#
### PURPOSE:
# Lecture 11 code and output file
#
### NOTES:
# - uses the Tidyverse package and Dplyr
################################################################################
### 0. Load the packages we will need for this file ####
library(tidyverse) # load the installed package for each new session of R
library(broom)
library(readxl) # Read in data
library(modelsummary) # For making regression tables
library(causaldata) # Useful toy data sets
library(here) # Helpful in working with directories and projects
library(AER) # this package has lots of applied metrics packages
library(foreign) # Helpful for reading in data from Stata or other code languages
library(gghighlight) # For figures
library(lubridate) # For figures
library(stargazer) # For tables
# TWFE Packages
library(fixest)
library(TwoWayFEWeights)
library(bacondecomp)
library(DIDmultiplegt)
# library(did)
library(did2s)
# library(etwfe)
set.seed(03262020)
# Setting the seed helps to make random number generators give us the same numbers across machines
################################################################################
regdata_dte <- regdata_dte %>% ungroup()%>% mutate(treated = ifelse(reltime >= 0,1,0))
mydata <- read.csv(here("us_state_vaccinations.csv"))
mydata$date <- as.yearmon(mydata$date)
# Trim out some "states" that we don't need
`%!in%` <- Negate(`%in%`)
mydata <- mydata %>% filter(location  %!in% c("American Samoa", "Bureau of Prisons", "Dept of Defense",
"Federated States of Micronesia", "Guam", "Indian Health Svc",
"Long Term Care", "Marshall Islands", "Northern Mariana Islands",
"Puerto Rico", "Republic of Palau", "United States", "Veterans Health",
"Virgin Islands"))
# Group to month level
mydata <- mydata %>% group_by(date, location) %>%
summarize(total_vaccinations_per_hundred = sum(total_vaccinations_per_hundred,na.rm=T),
people_vaccinated_per_hundred = sum(people_vaccinated_per_hundred,na.rm=T),
monthly_vaccinations_per_million = sum(daily_vaccinations_per_million,na.rm=T))
# Identify all treated states for our TWFE regression
regdata_dte <- mydata %>% mutate(treatdate = ifelse(location %in% c("Ohio", "New York State", "Maryland"), 2021.417,
ifelse(location %in% c("Massachusetts", "Michigan"), 2021.583,NA)), # Note the treatment date doesn't matter for non-treated states
reltime = round((as.numeric(date) - treatdate)*12))
regdata_dte <- regdata_dte %>% mutate(state = ifelse(location %in% c("Ohio", "New York State", "Maryland", "Massachusetts", "Michigan"), 1, 0),
logy = log(monthly_vaccinations_per_million+1))
# Make sure to reassign "treated" states
dte <- feols(logy ~ i(reltime, ref = -1) |
date + location, data = regdata_dte)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
regdata_dte <- regdata_dte %>% ungroup()%>% mutate(treated = ifelse(reltime >= 0,1,0))
twowayfeweights(df=regdata_dte, # Dataframe
Y="logy", # Dep var
G="location", # group identifier
T="date", # Date var
D="treated", # Whether state was treated
cmd_type="feTR") # type of estimation to perform -- most commonly feTR
weighttable <- twowayfeweights(df=regdata_dte, # Dataframe
Y="logy", # Dep var
G="location", # group identifier
T="date", # Date var
D="treated", # Whether state was treated
cmd_type="feTR") # type of estimation to perform -- most commonly feTR
regdata_dte <- regdata_dte %>% ungroup()%>% mutate(treated = ifelse(reltime >= 0,1,0))
twowayfeweights(df=regdata_dte, # Dataframe
Y="logy", # Dep var
G="location", # group identifier
T="date", # Date var
D="treated", # Whether state was treated
cmd_type="feTR") # type of estimation to perform -- most commonly feTR
weighttable <- twowayfeweights(df=regdata_dte, # Dataframe
Y="logy", # Dep var
G="location", # group identifier
T="date", # Date var
D="treated", # Whether state was treated
cmd_type="feTR") # type of estimation to perform -- most commonly feTR
# lots of negative weighting here!
# first, identify all cohorts of treated observations
cohort_dates <- regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
filter(date == min(date)) # %>% ungroup() %>%
regdata_dte <- regdata_dte %>% mutate(treated = ifelse(is.na(treated),0,treated))
regdata_dte <- regdata_dte %>% mutate(stateid = as.numeric(as.factor(location)),
dateid=as.numeric(as.factor(date))) # Need a state id variable as a number, not string
bacon(formula = logy ~ treated,
data=regdata_dte,
id_var="stateid",
time_var="dateid",
quietly=F)
# first, identify all cohorts of treated observations
cohort_dates <- regdata_dte %>% filter(treated == 1) %>%
group_by(stateid) %>%
filter(date == min(date)) # %>% ungroup() %>%
# select(date) %>% unique()
# two cohorts: Jun and Aug 2021
# for each cohort, pull all treated at time t + those not treated between (t-4,t+4)
`%!in%` <- Negate(`%in%`)
stack_1 <- regdata_dte %>%
filter(dateid >= 2 & dateid <= 10) %>% # Appropriate timing
filter(stateid %!in% c(22,23)) %>% # Clean controls
group_by(stateid) %>% mutate(evertreated = max(treated)) %>% ungroup() %>%
mutate(reltime = ifelse(evertreated == 1, dateid - 6, NA))
# Reset relative time for this cohort
stack_2 <- regdata_dte %>%
filter(dateid >= 4 & dateid <= 12) %>%
filter(stateid %!in% c(21,33,36)) %>%
group_by(stateid) %>% mutate(evertreated = max(treated)) %>% ungroup() %>%
mutate(reltime = ifelse(evertreated == 1, dateid - 8, NA))
# Reset relative time for this cohort
# create stacked data
stack <- rbind(stack_1,stack_2)
# run event study on this data
dte <- feols(monthly_vaccinations_per_million ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
# for each cohort, pull all treated at time t + those not treated between (t-4,t+4)
`%!in%` <- Negate(`%in%`)
stack_1 <- regdata_dte %>%
filter(dateid >= 2 & dateid <= 10) %>% # Appropriate timing
filter(stateid %!in% c(22,23)) %>% # Clean controls
group_by(stateid) %>% mutate(evertreated = max(treated)) %>% ungroup() %>%
mutate(reltime = ifelse(evertreated == 1, dateid - 6, NA))
stack_2 <- regdata_dte %>%
filter(dateid >= 4 & dateid <= 12) %>%
filter(stateid %!in% c(21,33,36)) %>%
group_by(stateid) %>% mutate(evertreated = max(treated)) %>% ungroup() %>%
mutate(reltime = ifelse(evertreated == 1, dateid - 8, NA))
# create stacked data
stack <- rbind(stack_1,stack_2)
# run event study on this data
dte <- feols(monthly_vaccinations_per_million ~ i(reltime, ref = -1) |
dateid + stateid, data = stack)
# And use coefplot() for a graph of effects
iplot(dte,ref.line=-0.2,
ref.line.par=list(col="red",lty=1,lwd=2)) # How do we interpret this?
